{"version":3,"sources":["modal_component.js","main.js","App.js","serviceWorker.js","index.js"],"names":["Modal","props","handleDateChange","date","setState","state","startDate","Date","checkDate","bind","start_time","starttime","split","toDateString","className","isOpen","this","flag","size","real_name","selected","onChange","name","dateFormat","activity_periods","map","link","i","key","end_time","onClick","togel","Component","MainApp","handleChange","e","target","value","toggle","index","modal","salectedinfo","members","setmodel","modalInputName","axios","get","then","res","data","catch","error","alert","member","React","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2aaffd6e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {  MDBBtn, MDBModal, MDBModalBody, MDBModalHeader, MDBModalFooter } from 'mdbreact';\r\nimport DatePicker from \"react-datepicker\";\r\n\r\n \r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nclass Modal extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      startDate:  new Date()\r\n    }\r\n    this.checkDate = this.checkDate.bind(this);\r\n    this.handleDateChange = this.handleDateChange.bind(this);\r\n}\r\n\r\nhandleDateChange =(date) => {\r\n  this.setState(state =>({\r\n    startDate: date})\r\n    )\r\n}\r\n\r\ncheckDate (start_time, startDate){\r\nvar starttime = start_time.split(\" \");\r\nvar d = new Date(starttime[0]+','+starttime[1]+','+ starttime[2]);\r\nconst start=d.toDateString();\r\nconst salecteddate =new Date(startDate).toDateString();\r\nif(start===salecteddate){\r\n return 1;\r\n}\r\n}\r\n  render() {\r\n    return (\r\n      <div className=\"Appmodal\"> \r\n        <MDBModal  isOpen={this.props.flag}  size=\"lg\">\r\n            <MDBModalHeader  className=\"Modalheader\">\r\n              <span className=\"Modaltitle\">USER DETAILS MODAL</span>    \r\n            </MDBModalHeader>\r\n            <MDBModalBody className=\"Modalbody\">              \r\n            <div className=\"Firstrow \">\r\n            <span className=\"inlinestyle\"> User Name :</span> {this.props.date.real_name}\r\n          </div> \r\n          <div className=\"Secondrow \">\r\n            <span className=\"inlinestyle\">Choose Calender </span>   \r\n              <DatePicker selected={this.state.startDate} \r\n                    onChange={this.handleDateChange}\r\n                    name=\"startDate\"\r\n                    dateFormat = \"MM/dd/yyyy\"\r\n                    /> \r\n          </div>\r\n            <h5 className=\"Modalpragraph\">Information of {this.props.date.real_name}</h5>\r\n                {(\r\n                  typeof  this.props.date.activity_periods !== \"undefined\")\r\n                    && this.props.date.activity_periods.map((link,i) =>      \r\n                    (this.checkDate(link.start_time,this.state.startDate)) && \r\n                    <li className=\"list  \" key={i}>{link.start_time}, {link.end_time}\r\n                </li>   \r\n                )}\r\n            </MDBModalBody>\r\n            <MDBModalFooter className=\"Footersection\">\r\n                <MDBBtn className=\"btn btn-light\" onClick={this.props.togel} >Close</MDBBtn>\r\n            </MDBModalFooter>\r\n          </MDBModal>\r\n      </div> \r\n    );\r\n  }\r\n}\r\nexport default Modal;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport '../node_modules/bootstrap-css-only/css/bootstrap.min.css';\r\nimport axios from 'axios';\r\nimport './App.css'\r\nimport Modal from './modal_component';\r\n\r\nclass MainApp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            members:[],\r\n            modal:false,\r\n            salectedinfo:{},\r\n            modalInputName:\"\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        axios.get(`http://my-json-server.typicode.com/shivangisbv/mockjson/db/`,{})\r\n        .then((res)=>{\r\n            const members = res.data.members ;\r\n            this.setState({\r\n                members:members,    \r\n            });\r\n            })\r\n        .catch((error)=>{\r\n            alert(\"There is an error in API call.\");\r\n        });\r\n    }  \r\n \r\n    handleChange = (e) => {\r\n        const target = e.target;\r\n        const name = target.name;\r\n        const value = target.value;\r\n        this.setState({\r\n            [name]:value\r\n        });\r\n    } \r\n    handleSubmit(e) {\r\n        this.setState({\r\n            modal:this.state.modalInputName });\r\n            this.toggle();\r\n    } \r\n    \r\n    toggle = (e,index) => {\r\n        this.setState({\r\n          modal: !this.state.modal,\r\n          salectedinfo: this.state.members[index]\r\n        });\r\n      }  \r\n   setmodel =()=>{\r\n    this.setState({\r\n        modal: !this.state.modal,\r\n       \r\n      });  \r\n   }\r\n    render() { \r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col align-self-center \">\r\n                        <h1 className=\"title \">Display All User Names</h1> \r\n                            {this.state.members.map((member,index) => (\r\n                                <li  key={index}  onClick={(e)=>this.toggle(e,index)} className=\" text-default \">\r\n                                    { member.real_name} \r\n                                \r\n                                </li>  \r\n                        \r\n                            ))}    \r\n                            {this.state.salectedinfo &&    <Modal  date = {this.state.salectedinfo} togel={this.setmodel} \r\n                            flag={this.state.modal}/>}\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default MainApp ;","import React from 'react';\nimport './App.css';\nimport MainApp from './main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}